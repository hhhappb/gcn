# Auto-generated by precompute_hop_matrix.py.
# This file contains precomputed hop matrices for various skeleton datasets.
# DO NOT EDIT THIS FILE MANUALLY.

import torch

def get_precomputed_hop_matrix(dataset, device='cpu'):
    """Fetches the precomputed hop matrix for a given dataset."""

    if dataset == 'ntu_rgb_d':
        # ntu_rgb_d with 25 joints
        # Shape: torch.Size([25, 25]), Max hop: 12
        hop_matrix = torch.tensor([
            [0, 1, 3, 4, 3, 4, 5, 6, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4, 2, 8, 7, 8, 7],
            [1, 0, 2, 3, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 1, 7, 6, 7, 6],
            [3, 2, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 4, 5, 6, 7, 4, 5, 6, 7, 1, 7, 6, 7, 6],
            [4, 3, 1, 0, 3, 4, 5, 6, 3, 4, 5, 6, 5, 6, 7, 8, 5, 6, 7, 8, 2, 8, 7, 8, 7],
            [3, 2, 2, 3, 0, 1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 7, 4, 5, 6, 7, 1, 5, 4, 7, 6],
            [4, 3, 3, 4, 1, 0, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 5, 6, 7, 8, 2, 4, 3, 8, 7],
            [5, 4, 4, 5, 2, 1, 0, 1, 4, 5, 6, 7, 6, 7, 8, 9, 6, 7, 8, 9, 3, 3, 2, 9, 8],
            [6, 5, 5, 6, 3, 2, 1, 0, 5, 6, 7, 8, 7, 8, 9, 10, 7, 8, 9, 10, 4, 2, 1, 10, 9],
            [3, 2, 2, 3, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 1, 7, 6, 5, 4],
            [4, 3, 3, 4, 3, 4, 5, 6, 1, 0, 1, 2, 5, 6, 7, 8, 5, 6, 7, 8, 2, 8, 7, 4, 3],
            [5, 4, 4, 5, 4, 5, 6, 7, 2, 1, 0, 1, 6, 7, 8, 9, 6, 7, 8, 9, 3, 9, 8, 3, 2],
            [6, 5, 5, 6, 5, 6, 7, 8, 3, 2, 1, 0, 7, 8, 9, 10, 7, 8, 9, 10, 4, 10, 9, 2, 1],
            [1, 2, 4, 5, 4, 5, 6, 7, 4, 5, 6, 7, 0, 1, 2, 3, 2, 3, 4, 5, 3, 9, 8, 9, 8],
            [2, 3, 5, 6, 5, 6, 7, 8, 5, 6, 7, 8, 1, 0, 1, 2, 3, 4, 5, 6, 4, 10, 9, 10, 9],
            [3, 4, 6, 7, 6, 7, 8, 9, 6, 7, 8, 9, 2, 1, 0, 1, 4, 5, 6, 7, 5, 11, 10, 11, 10],
            [4, 5, 7, 8, 7, 8, 9, 10, 7, 8, 9, 10, 3, 2, 1, 0, 5, 6, 7, 8, 6, 12, 11, 12, 11],
            [1, 2, 4, 5, 4, 5, 6, 7, 4, 5, 6, 7, 2, 3, 4, 5, 0, 1, 2, 3, 3, 9, 8, 9, 8],
            [2, 3, 5, 6, 5, 6, 7, 8, 5, 6, 7, 8, 3, 4, 5, 6, 1, 0, 1, 2, 4, 10, 9, 10, 9],
            [3, 4, 6, 7, 6, 7, 8, 9, 6, 7, 8, 9, 4, 5, 6, 7, 2, 1, 0, 1, 5, 11, 10, 11, 10],
            [4, 5, 7, 8, 7, 8, 9, 10, 7, 8, 9, 10, 5, 6, 7, 8, 3, 2, 1, 0, 6, 12, 11, 12, 11],
            [2, 1, 1, 2, 1, 2, 3, 4, 1, 2, 3, 4, 3, 4, 5, 6, 3, 4, 5, 6, 0, 6, 5, 6, 5],
            [8, 7, 7, 8, 5, 4, 3, 2, 7, 8, 9, 10, 9, 10, 11, 12, 9, 10, 11, 12, 6, 0, 1, 12, 11],
            [7, 6, 6, 7, 4, 3, 2, 1, 6, 7, 8, 9, 8, 9, 10, 11, 8, 9, 10, 11, 5, 1, 0, 11, 10],
            [8, 7, 7, 8, 7, 8, 9, 10, 5, 4, 3, 2, 9, 10, 11, 12, 9, 10, 11, 12, 6, 12, 11, 0, 1],
            [7, 6, 6, 7, 6, 7, 8, 9, 4, 3, 2, 1, 8, 9, 10, 11, 8, 9, 10, 11, 5, 11, 10, 1, 0],
        ], dtype=torch.long)
    elif dataset == 'nw-ucla':
        # nw-ucla with 20 joints
        # Shape: torch.Size([20, 20]), Max hop: 10
        hop_matrix = torch.tensor([
            [0, 1, 2, 3, 3, 4, 5, 6, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4],
            [1, 0, 1, 2, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5],
            [2, 1, 0, 1, 1, 2, 3, 4, 1, 2, 3, 4, 3, 4, 5, 6, 3, 4, 5, 6],
            [3, 2, 1, 0, 2, 3, 4, 5, 2, 3, 4, 5, 4, 5, 6, 7, 4, 5, 6, 7],
            [3, 2, 1, 2, 0, 1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 7, 4, 5, 6, 7],
            [4, 3, 2, 3, 1, 0, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 5, 6, 7, 8],
            [5, 4, 3, 4, 2, 1, 0, 1, 4, 5, 6, 7, 6, 7, 8, 9, 6, 7, 8, 9],
            [6, 5, 4, 5, 3, 2, 1, 0, 5, 6, 7, 8, 7, 8, 9, 10, 7, 8, 9, 10],
            [3, 2, 1, 2, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7],
            [4, 3, 2, 3, 3, 4, 5, 6, 1, 0, 1, 2, 5, 6, 7, 8, 5, 6, 7, 8],
            [5, 4, 3, 4, 4, 5, 6, 7, 2, 1, 0, 1, 6, 7, 8, 9, 6, 7, 8, 9],
            [6, 5, 4, 5, 5, 6, 7, 8, 3, 2, 1, 0, 7, 8, 9, 10, 7, 8, 9, 10],
            [1, 2, 3, 4, 4, 5, 6, 7, 4, 5, 6, 7, 0, 1, 2, 3, 2, 3, 4, 5],
            [2, 3, 4, 5, 5, 6, 7, 8, 5, 6, 7, 8, 1, 0, 1, 2, 3, 4, 5, 6],
            [3, 4, 5, 6, 6, 7, 8, 9, 6, 7, 8, 9, 2, 1, 0, 1, 4, 5, 6, 7],
            [4, 5, 6, 7, 7, 8, 9, 10, 7, 8, 9, 10, 3, 2, 1, 0, 5, 6, 7, 8],
            [1, 2, 3, 4, 4, 5, 6, 7, 4, 5, 6, 7, 2, 3, 4, 5, 0, 1, 2, 3],
            [2, 3, 4, 5, 5, 6, 7, 8, 5, 6, 7, 8, 3, 4, 5, 6, 1, 0, 1, 2],
            [3, 4, 5, 6, 6, 7, 8, 9, 6, 7, 8, 9, 4, 5, 6, 7, 2, 1, 0, 1],
            [4, 5, 6, 7, 7, 8, 9, 10, 7, 8, 9, 10, 5, 6, 7, 8, 3, 2, 1, 0],
        ], dtype=torch.long)
    elif dataset == 'shrec17':
        # shrec17 with 22 joints
        # Shape: torch.Size([22, 22]), Max hop: 9
        hop_matrix = torch.tensor([
            [0, 1, 1, 2, 3, 4, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5],
            [1, 0, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],
            [1, 2, 0, 1, 2, 3, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6],
            [2, 3, 1, 0, 1, 2, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7],
            [3, 4, 2, 1, 0, 1, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8],
            [4, 5, 3, 2, 1, 0, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9],
            [2, 1, 3, 4, 5, 6, 0, 1, 2, 3, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5],
            [3, 2, 4, 5, 6, 7, 1, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6],
            [4, 3, 5, 6, 7, 8, 2, 1, 0, 1, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7],
            [5, 4, 6, 7, 8, 9, 3, 2, 1, 0, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8],
            [2, 1, 3, 4, 5, 6, 2, 3, 4, 5, 0, 1, 2, 3, 2, 3, 4, 5, 2, 3, 4, 5],
            [3, 2, 4, 5, 6, 7, 3, 4, 5, 6, 1, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6],
            [4, 3, 5, 6, 7, 8, 4, 5, 6, 7, 2, 1, 0, 1, 4, 5, 6, 7, 4, 5, 6, 7],
            [5, 4, 6, 7, 8, 9, 5, 6, 7, 8, 3, 2, 1, 0, 5, 6, 7, 8, 5, 6, 7, 8],
            [2, 1, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 5, 0, 1, 2, 3, 2, 3, 4, 5],
            [3, 2, 4, 5, 6, 7, 3, 4, 5, 6, 3, 4, 5, 6, 1, 0, 1, 2, 3, 4, 5, 6],
            [4, 3, 5, 6, 7, 8, 4, 5, 6, 7, 4, 5, 6, 7, 2, 1, 0, 1, 4, 5, 6, 7],
            [5, 4, 6, 7, 8, 9, 5, 6, 7, 8, 5, 6, 7, 8, 3, 2, 1, 0, 5, 6, 7, 8],
            [2, 1, 3, 4, 5, 6, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 0, 1, 2, 3],
            [3, 2, 4, 5, 6, 7, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 1, 0, 1, 2],
            [4, 3, 5, 6, 7, 8, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 2, 1, 0, 1],
            [5, 4, 6, 7, 8, 9, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 3, 2, 1, 0],
        ], dtype=torch.long)
    else:
        supported = ', '.join(get_precomputed_hop_matrix.supported_datasets)
        raise ValueError(f"Hop matrix for dataset '{dataset}' not available. Supported datasets: [{supported}]")

    return hop_matrix.to(device)

# Attach the list of supported datasets to the function for easy checking
get_precomputed_hop_matrix.supported_datasets = ['ntu_rgb_d', 'nw-ucla', 'shrec17']